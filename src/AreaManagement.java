
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import project_sanwa_new.DBArea;
import project_sanwa_new.DBSites;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yotsathon
 */
public class AreaManagement extends javax.swing.JPanel implements MouseListener {

    /**
     * Creates new form siteList
     */
    DBArea dbA;
    JTable table;
    JPanel edit;
    JButton saveButton;
    JButton canncelButton;
    JTextField description;
    DefaultTableModel model;
    int rowTable;

    public AreaManagement() {
        initComponents();
        dbA = new DBArea();
        
        table = new JTable() {
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int rowIndex, int vColIndex) {
                Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    c.setBackground(new Color(107, 184, 245));
                } else if (isCellSelected(rowIndex, vColIndex)) {
                    c.setBackground(new Color(0, 176, 255));
                } else {
                    c.setBackground(getBackground());
                }
                return c;
            }

        };
        table.setPreferredScrollableViewportSize(new Dimension(650, 400));
        table.setFillsViewportHeight(true);
        table.addMouseListener(this);
        JScrollPane scrollPane = new JScrollPane(table);
        description = new JTextField("description", 50);
        description.setMaximumSize(description.getPreferredSize());
        
        saveButton = new JButton("Save");
        saveButton.setEnabled(false);
        saveButton.addMouseListener(this);

        edit = new JPanel();
        edit.setLayout(new BoxLayout(edit, BoxLayout.Y_AXIS));
        edit.setPreferredSize(new Dimension(10, 100));
        edit.add(description);
        edit.add(saveButton);
        getDataToTable();
        add(scrollPane, BorderLayout.LINE_START);
        add(edit, BorderLayout.CENTER);

    }

    private void getDataToTable() {
        
        String columnNames[] = {"AreaID", "Site", "Area description"};
        model = new DefaultTableModel(new Object[0][0], columnNames);
        dbA.connect();
        ResultSet rs = dbA.selectAllArea();
        try {
            while (rs.next()) {
                Object[] obj = {rs.getString("areaID"), rs.getString("siteName"), rs.getString("areaName")};
                model.addRow(obj);
            }
            table.setModel(model);
            table.removeColumn(table.getColumnModel().getColumn(0));
        } catch (SQLException ex) {
            Logger.getLogger(SiteManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == table) {
            saveButton.setEnabled(true);
            rowTable = table.rowAtPoint(e.getPoint());
            description.setText(model.getValueAt(rowTable, 2).toString());
           
        } else if (e.getSource() == saveButton) {
            int rs = dbA.updateArea(model.getValueAt(rowTable, 0).toString(),description.getText());
            if(rs!=0){
                getDataToTable();
                description.setText("");
                saveButton.setEnabled(false);
            } 
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
